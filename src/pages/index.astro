---
import Layout from '../layouts/Layout.astro';
import { caja } from '../layouts/Caca';

---

<Layout title="Home">
	<div class="w-full h-4 ">
<div class="size-2 bg-teal-500"></div>
	</div>
<section id="banner" class="h-1/3 sm:h-3/5   " transition:name="Home">
	<img src={ caja[0] }  alt="names" class="flayer">
	<img src={ caja[1] }  alt="names" class="flayer">
	<img src={ caja[2] }  alt="names" class="flayer">
	<img src={ caja[3] }  alt="names" class="flayer">
	<img src={ caja[4] }  alt="names" class="flayer">



</section>
<script is:inline>
	// Obtener el elemento banner
const banner = document.querySelector("#banner");
const elementos = document.querySelectorAll("#banner > img");
// Obtener el elemento de referencia
const referencia = document.querySelector("body > main");


// Agregar un event listener para el evento scroll
banner.addEventListener("scroll", function() {
	const rate = Math.floor( (  banner.scrollLeft/banner.scrollLeft == 1 ? 1 : 0)*(banner.scrollLeft + Math.floor(banner.scrollWidth / elementos.length )*2 )*100 / banner.scrollWidth  );

console.log(rate);
if(rate >= 87){
	banner.appendChild(banner.firstElementChild);
}else if( rate == 0){
	banner.prepend(banner.lastElementChild);
}
	// Tu código para ejecutar cuando el scroll cambie
let elementoMasCercano = null;
let distanciaMinima = Infinity;

// Iteramos a través de los elementos para encontrar el más cercano al centro
elementos.forEach(elemento => {
    const elementoAncho = elemento.offsetWidth;
    const elementoIzquierda = elemento.getBoundingClientRect().left;
    const centroElemento = elementoIzquierda + elementoAncho / 2;
    const distanciaAlCentro = Math.abs(referencia.offsetWidth / 2 - centroElemento);

    if (distanciaAlCentro < distanciaMinima) {
        distanciaMinima = distanciaAlCentro;
        elementoMasCercano = elemento;
    }

	
});

// Removemos la clase "central" de todos los elementos
elementos.forEach(elemento => {
    elemento.classList.remove('central');
	elemento.classList.add('oculto');
});

// Agregamos la clase "central" al elemento más cercano al centro
if (elementoMasCercano) {
    elementoMasCercano.classList.add('central');
	elementoMasCercano.classList.remove('oculto');
}

});

</script>
</Layout>

<style>
	#banner{
		display: flex;
		align-items: center;
		position: relative;
		overflow: scroll;
		scroll-snap-type: x mandatory; 
		/*scroll-behavior:smooth;*/
		scroll-padding: 0;
		gap: 0;
		overflow-y: hidden; /* Hide vertical scrollbar */

		&:has(img:hover) img:not(:hover) {
    filter: brightness(0.35);
  }
	

		&::-webkit-scrollbar{
			display: none;
		}


	}

	.flayer{
	object-fit: fill;
	scroll-snap-align: center;
	vertical-align: middle;
	width: calc(50%);
	max-height: 80%;
	/*transform: scale(0.9);
    */transition:  transform 0.3s, filter 0.3s;
  

	&:hover {
		transform: scale(1.3);
      z-index: 1;
      width: 100%;
      transition: transform 0.3s, filter 0.3s;
    }

	}

	 .central{
	  transform: scale(1.3);
      z-index: 1;
      width: 100%;
      aheight: auto;
      aaspect-ratio: 1;
      transition:  transform 0.3s, filter 0.3s;
	}
.oculto{
	filter: brightness(0.35);
	border-radius: 15px;

}

	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
		
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
